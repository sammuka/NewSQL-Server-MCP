# Makefile para MCP SQL Server
# Comandos √∫teis para desenvolvimento e produ√ß√£o

.PHONY: help install dev test clean build run docker-build docker-run docker-stop logs

# Configura√ß√µes
PYTHON := python3
PIP := pip3
DOCKER_IMAGE := mcp-sqlserver
DOCKER_CONTAINER := mcp-sqlserver
COMPOSE_FILE := docker/docker-compose.yml
COMPOSE_FILE_MCP_ONLY := docker/docker-compose.mcp-only.yml

help: ## Mostra ajuda
	@echo "MCP SQL Server - Comandos dispon√≠veis:"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

install: ## Instala depend√™ncias Python
	$(PIP) install -r requirements.txt

dev: ## Configura√ß√£o para desenvolvimento
	cp config/.env.example .env
	@echo "‚úÖ Arquivo .env criado"
	@echo "üìù Configure as vari√°veis de ambiente em .env"
	@echo "üöÄ Execute 'make run' para iniciar o servidor"

test: ## Executa testes (placeholder)
	@echo "üß™ Executando testes..."
	# $(PYTHON) -m pytest tests/
	@echo "‚ö†Ô∏è Testes ainda n√£o implementados"

clean: ## Limpa arquivos tempor√°rios
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	find . -type d -name "*.egg-info" -exec rm -rf {} +
	@echo "üßπ Arquivos tempor√°rios removidos"

run: ## Executa servidor local
	$(PYTHON) -m src.main

run-dev: ## Executa servidor em modo desenvolvimento
	ENVIRONMENT=development $(PYTHON) -m src.main

# Docker commands
docker-build: ## Constr√≥i imagem Docker
	docker build -f docker/Dockerfile -t $(DOCKER_IMAGE) .

docker-run: ## Executa container Docker
	docker run -d --name $(DOCKER_CONTAINER) \
		-p 4000:4000 \
		--env-file .env \
		$(DOCKER_IMAGE)

docker-stop: ## Para container Docker
	docker stop $(DOCKER_CONTAINER) || true
	docker rm $(DOCKER_CONTAINER) || true

docker-logs: ## Mostra logs do container
	docker logs -f $(DOCKER_CONTAINER)

# Docker Compose commands
up: ## Inicia com docker-compose (com SQL Server)
	docker-compose -f $(COMPOSE_FILE) up -d

up-mcp-only: ## Inicia apenas MCP Server
	docker-compose -f $(COMPOSE_FILE_MCP_ONLY) up -d

down: ## Para docker-compose
	docker-compose -f $(COMPOSE_FILE) down
	docker-compose -f $(COMPOSE_FILE_MCP_ONLY) down

restart: ## Reinicia docker-compose
	make down
	make up

logs: ## Mostra logs do docker-compose
	docker-compose -f $(COMPOSE_FILE) logs -f mcp-sqlserver

logs-db: ## Mostra logs do SQL Server
	docker-compose -f $(COMPOSE_FILE) logs -f sqlserver

status: ## Mostra status dos containers
	docker-compose -f $(COMPOSE_FILE) ps

# Comandos de desenvolvimento
format: ## Formata c√≥digo (placeholder)
	@echo "üé® Formatando c√≥digo..."
	# black src/
	# isort src/
	@echo "‚ö†Ô∏è Formatadores ainda n√£o configurados"

lint: ## Executa linting (placeholder)
	@echo "üîç Executando linting..."
	# flake8 src/
	# mypy src/
	@echo "‚ö†Ô∏è Linters ainda n√£o configurados"

# Comandos de utilit√°rios
health: ## Verifica sa√∫de do servidor
	@echo "üè• Verificando sa√∫de do servidor..."
	@curl -f http://localhost:4000/health || echo "‚ùå Servidor n√£o est√° respondendo"

example: ## Executa cliente de exemplo
	$(PYTHON) examples/example_client.py

backup-env: ## Faz backup do arquivo .env
	cp .env .env.backup.$(shell date +%Y%m%d_%H%M%S)
	@echo "üíæ Backup do .env criado"

init: ## Inicializa√ß√£o completa do projeto
	make dev
	@echo ""
	@echo "üéâ Projeto inicializado!"
	@echo ""
	@echo "üìã Pr√≥ximos passos:"
	@echo "   1. Configure .env com suas credenciais"
	@echo "   2. Execute: make run (local) ou make up (Docker)"
	@echo "   3. Acesse: http://localhost:4000/docs"
	@echo ""

# Comandos de produ√ß√£o
deploy: ## Deploy para produ√ß√£o (Docker)
	make clean
	make docker-build
	make docker-stop
	make docker-run
	@echo "üöÄ Deploy conclu√≠do!"

check-env: ## Verifica se .env existe
	@if [ ! -f .env ]; then \
		echo "‚ùå Arquivo .env n√£o encontrado"; \
		echo "üí° Execute 'make dev' para criar"; \
		exit 1; \
	fi
	@echo "‚úÖ Arquivo .env encontrado"

# Comandos de monitoramento
monitor: ## Monitora logs em tempo real
	@echo "üìä Monitorando logs..."
	@docker-compose -f $(COMPOSE_FILE) logs -f --tail=50

ps: ## Lista processos relacionados
	@echo "üìã Processos Python relacionados:"
	@ps aux | grep python | grep -v grep || echo "Nenhum processo encontrado"
	@echo ""
	@echo "üìã Containers Docker:"
	@docker ps | grep mcp || echo "Nenhum container encontrado"

# Comandos de debug
debug: ## Informa√ß√µes de debug
	@echo "üêõ Informa√ß√µes de Debug:"
	@echo "Python: $(shell $(PYTHON) --version)"
	@echo "Pip: $(shell $(PIP) --version)"
	@echo "Docker: $(shell docker --version 2>/dev/null || echo 'N√£o instalado')"
	@echo "Docker Compose: $(shell docker-compose --version 2>/dev/null || echo 'N√£o instalado')"
	@echo ""
	@echo "üìÅ Estrutura do projeto:"
	@tree -L 2 -I "__pycache__|*.pyc" || ls -la

shell: ## Acessa shell do container
	docker exec -it $(DOCKER_CONTAINER) /bin/bash

# Meta target
all: clean install dev ## Executa limpeza, instala√ß√£o e configura√ß√£o
